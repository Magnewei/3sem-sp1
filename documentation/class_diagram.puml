@startuml sp1

component TMDB_API [
The Movie Database API
]

database Database [
Postgres Database
]

'' Styling
skinparam ArrowThickness 3
skinparam linetype ortho
skinparam ArrowColor Green

''

package "services" {
  class MovieList {
    +getAllMovies(): List<Movie>
    +sortByTitle(): void
    +sortByReleaseDate(): void
    +sortByGenre(): void
    +sortByCast(object: MoviePerson): void
    -fetchDataFromApi(apiEndpoint: String): void
    -saveMoviesToDatabase(movies: List<MovieDTO>): void
    -moviePersonDAO: MoviePersonDAO
    -movieDAO: MovieDAO
    -movies: List<Movie>
    -apiService: ApiService
  }

  interface ApiService {
    +fetchMoviesFromApi(apiEndpoint: String): List<MovieDTO>
    -API_KEY: String
  }

  class ApiServiceImpl implements ApiService {
    +fetchMoviesFromApi(apiEndpoint: String): List<MovieDTO>
  }
}

package "persistence" {
  package "daos" {
    interface IDAO {
      +save(entity: Object)
      +delete(id: int)
      +update(entity: <T>)
      +find(id: int): <T>
      +getAll(): List<T>
      -toEntity(DTO: <T>): <T>
    }

    class MovieDAO implements IDAO {
      +save(entity: MovieDTO)
      +delete(id: int)
      +update(entity: MovieDTO)
      +find(id: int): Movie
      +findAll(): List<Movie>
      -toEntity(DTO: MovieDTO): Movie
    }

    class MoviePersonDAO implements IDAO {
      +save(entity: MoviePersonDTO): void
      +delete(id: int): void
      +update(entity: MoviePerson): void
      +find(id: int): MoviePerson
      +getAll(): List<MoviePerson>
      -toEntity(DTO: MoviePersonDTO): MoviePerson
    }
  }

  package "dtos" {
    class MovieDTO {
      -id: int
      -title: String
      -originalTitle: String
      -overview: String
      -mediaType: String
      -originalLanguage: String
      -posterPath: String
      -backdropPath: String
      -releaseDate: String
      -popularity: double
      -voteAverage: double
      -voteCount: int
      -adult: boolean
      -video: boolean
      -cast: List<MoviePerson>
      -genreIds: List<Integer>
    }

    class MoviePersonDTO {
      -id: int
      -adult: boolean
      -name: String
      -gender: String
      -knownForDepartment: String
      -originalName: String
      -popularity: double
      -profilePath: String
      -knownFor: List<Movie>
    }
  }

  package "entities" {
    class Movie {
      -id: int
      -title: String
      -originalTitle: String
      -overview: String
      -originalLanguage: String
      -posterPath: String
      -backdropPath: String
      -releaseDate: String
      -popularity: double
      -voteAverage: double
      -voteCount: int
      -adult: boolean
      -mediaType: String
      -movie: boolean
      -cast: List<MoviePerson>
      -genreIds: List<Integer>
    }

    class MoviePerson {
      -adult: boolean
      -id: int
      -name: String
      -gender: int
      -knownForDepartment: String
      -originalName: String
      -popularity: double
      -profilePath: String
      -knownFor: List<Movie>
    }
  }
}

package "exceptions" {
  class JpaException {
    +JpaException(String message)
  }

  class ApiException {
      +ApiException(String message)
    }
}


' Define relationships
TMDB_API --> ApiService : Uses
IDAO --> Database : Manages
MovieList --> MovieDAO : Uses
MovieList --> ApiService : Uses
ApiServiceImpl --|> ApiService : Implements
MovieDAO --> Movie : Manages
MoviePersonDAO --> MoviePerson : Manages
MovieDTO --> Movie : Maps to/from
MoviePersonDTO --> MoviePerson : Maps to/from
JpaException <|-- MovieDAO : Throws
JpaException <|-- MoviePersonDAO : Throws
ApiException <|-- ApiService : Throws
Movie --> MoviePerson

@enduml